<form class="form-horizontal">
    <% if (tsContext){ %>
    <fieldset>
        <p>This is a "get started" code snippet for Typescript code where you can see how to access your JayStorm service from Typescript.</p>
        <p class='alert alert-info iblock'>
          See more info at <a target='_blank' href="http://typescriptlang.org">http://typescriptlang.org/</a>
        </p>
<a class="btn btn-primary" href="javascript:document.location = 'data:Application/octet-stream,' +encodeURIComponent($('#service-<%=template.name %>-template-<%=service.ServiceID %>').text());">Download <%=service.Name%>.d.ts</a>
    </fieldset>
    <fieldset>
        <legend>
          <h3>Get started Typescript code</h3>
        </legend>
        <textarea class="console-code" id="service-<%=template.name %>-template-<%=service.ServiceID %>" style="width:98%;resize:none;font-family:monospace;background:black;color:silver;"><%
        setTimeout(function(){
            CodeMirror.fromTextArea(document.getElementById('service-' + template.name + '-template-' + service.ServiceID), {
                mode: 'text/typescript',
                lineNumbers: true
            });
        });
%>
///<reference path="<%=service.Name%>.d.ts" />

var <%=service.Name%>Service = new <%=service.Name%>.<%=service.Name%>Service({name: "oData",
    oDataServiceHost:"<%=app.url + service.Name %>"
// you'll need this if your database operation needs authentication/authorization
//  , user: 'scott', password: 'tiger' 
});

<% if (service.DatabaseID){ %>
// read
function read() {
    return <%=service.Name%>Service
        .<%= serviceType.memberDefinitions.getPublicMappedProperties()[0].name %>
        .filter(f => f.<%= serviceType.memberDefinitions.getPublicMappedProperties()[0].elementType.memberDefinitions.getPublicMappedProperties()[1].name %> != null)
        .forEach(f => console.log(f.<%= serviceType.memberDefinitions.getPublicMappedProperties()[0].elementType.memberDefinitions.getPublicMappedProperties()[1].name %>));
}

// add new elem
function add() {
    var elem = new <%=service.Name%>.<%= serviceType.memberDefinitions.getPublicMappedProperties()[0].elementType.name %>({ <%= serviceType.memberDefinitions.getPublicMappedProperties()[0].elementType.memberDefinitions.getPublicMappedProperties()[1].name %>: <value> });
    <%=service.Name%>Service.add(elem);
    return <%=service.Name%>Service.saveChanges()
        .then(function (n) {
            console.log('saved');
            return elem;
        })
        .fail(function (reason) {
            console.log('save failed', reason);
        });
}

// update elem
function update(elem) {
    <%=service.Name%>Service.<%= serviceType.memberDefinitions.getPublicMappedProperties()[0].name %>.attach(elem);
    elem. <%= serviceType.memberDefinitions.getPublicMappedProperties()[0].elementType.memberDefinitions.getPublicMappedProperties()[1].name %> = <new value>;
    return <%=service.Name%>Service.saveChanges()
        .then(function (n) {
            console.log('updated');
            return elem;
        })
        .fail(function (reason) {
            console.log('update failed', reason);
        });
}

function remove(elem) {
    <%=service.Name%>Service.<%= serviceType.memberDefinitions.getPublicMappedProperties()[0].name %>.remove(elem);
    return <%=service.Name%>Service.saveChanges()
        .then(function (n) {
            console.log('deleted');
        })
        .fail(function (reason) {
            console.log('delete failed', reason);
        });
}

window.onload = () => {

    <%=service.Name%>Service.onReady()
        .then(read)
        .then(add)
        .then(update)
        .then(remove);
};
<% }else{ %>

function call(){
    <%=service.Name %>.<%= serviceType.memberDefinitions.getPublicMappedMethods()[0].name %>(<%
        for (var i = 0; i < (serviceType.memberDefinitions.getPublicMappedMethods()[0].params || { length: 0 }).length; i++){
            %><some param value>,<%
        }
        %>function(result){
        // "result" is the return value of the API call
        // do your code work here
    });
}

window.onload = () => {

    <%=service.Name%>Service.onReady()
        .then(call);
};
<% } %>

</textarea>
    </fieldset>
    <fieldset>
	<!--
        <legend><h3>JayData TypeScript context</h3></legend>
        <p>Include this TypeScript code into your application to use a static JayData context.</p>
	-->
        <textarea id="service-<%=template.name %>-template-<%=service.ServiceID %>" style="display:none;width:98%;resize:none;font-family:monospace;background:black;color:silver;"><%
        setTimeout(function(){
            var el = document.getElementById('service-' + template.name + '-template-' + service.ServiceID);
            if (el){
                el.style.height = el.scrollHeight + 'px';
            }
        });
        %><%=tsContext %></textarea>
    </fieldset>
    <% } %>
</form>
<% if (!jsContext){ %>
<p class="text-error">Service unpublished. Please publish your service by deploying your application.</p>
<% }%>

